Download Apache Cassandra

    wget -c http://www-us.apache.org/dist/cassandra/2.2.8/apache-cassandra-2.2.8-bin.tar.gz
    tar zxf apache-cassandra-2.2.8-bin.tar.gz
    cd apache-cassandra-2.2.8

Set `start_rpc: true` in `conf/cassandra.yaml` and start Cassandra

    bin/casandra

Next up setup ElasticSearch

    wget -c https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz
    tar zxf elasticsearch-1.7.3.tar.gz
    cd elasticsearch-1.7.3
    bin/elasticsearch

Enter SBT console


    sbt/sbt console
    Welcome to Scala version 2.10.5 (OpenJDK 64-Bit Server VM, Java 1.8.0_102).
    Type in expressions to have them evaluated.
    Type :help for more information.
    scala> println("Hello")

Now inside Scala REPL (started above), we can import the required classes and populate a default graph


    import com.thinkaurelius.titan.core._
    import com.thinkaurelius.titan.example.GraphOfTheGodsFactory
    import org.apache.commons.configuration.BaseConfiguration
    import scala.collection.JavaConversions._
    val cassConf = new BaseConfiguration()
    cassConf.setProperty("index.search.backend", "elasticsearch")
    cassConf.setProperty("index.search.client-only", "false")
    cassConf.setProperty("index.search.local-mode", "true")
    cassConf.setProperty("index.search.directory", "/tmp/searchindex")
    cassConf.setProperty("storage.backend", "cassandra")
    cassConf.setProperty("storage.hostname", "localhost")
    cassConf.setProperty("storage.port", "9160")
    cassConf.setProperty("storage.keyspace", "titan")
    val titanGraph = TitanFactory.open(cassConf)
    GraphOfTheGodsFactory.load(titanGraph)
    val g = titanGraph.traversal()


In the same Scala REPL, we can now explore the graph:

    scala> g.V().toList.foreach(println)
    v[8232]
    v[16424]
    v[8296]
    v[4136]
    v[12328]
    v[4272]
    v[24616]
    v[4200]
    v[20520]
    v[4248]
    v[4344]
    v[4208]


Use Marvel Example

    scala> import in.tuxdna.example.titandb.MarvelGraphFactory
    import in.tuxdna.example.titandb.MarvelGraphFactory
    scala> val mgf = new MarvelGraphFactory()
    mgf: in.tuxdna.example.titandb.MarvelGraphFactory = in.tuxdna.example.titandb.MarvelGraphFactory@3a0fdf95
    scala> mgf.load(titanGraph, 100000, true)
    14:46:37,248  INFO MarvelGraphFactory:127 - Character SPIDER-MAN has most appearances at 1625
    14:47:49,393  INFO MarvelGraphFactory:153 - Awaiting:28801
    12/12/16 2:47:49 PM ============================================================
    -- Counters --------------------------------------------------------------------
    MarvelGraphFactory.get_character
                 count = 7588
    MarvelGraphFactory.get_comic-book
                 count = 12849
    com.thinkaurelius.titan.sys.schema.query.graph.execute.calls
                 count = 11
    com.thinkaurelius.titan.sys.schema.query.graph.getNew.calls
                 count = 11
    com.thinkaurelius.titan.sys.schema.query.graph.hasDeletions.calls
                 count = 11
    com.thinkaurelius.titan.sys.schema.tx.begin
                 count = 52
    com.thinkaurelius.titan.sys.schema.tx.rollback
                 count = 52
    scala> g.V().has("comic-book", "AVF 4").in("appeared").values("character").order().foreach(println)
    3-D MAN
    ANT-MAN
    CAPTAIN AMERICA
    CHARLES CHAN
    DR. HENRY J.
    GORILLA-MAN
    GUSTAV BRANDT
    HAWK
    HUMAN ROBOT
    JANET VAN DYNE
    JONES, RICHARD MILHO
    LIBRA
    MARVEL BOY III
    ROBER
    VENUS II
    WASP

